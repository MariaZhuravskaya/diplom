[
  {
    "model": "auth.permission",
    "pk": 1,
    "fields": {
      "name": "Can add log entry",
      "content_type": 1,
      "codename": "add_logentry"
    }
  },
  {
    "model": "auth.permission",
    "pk": 2,
    "fields": {
      "name": "Can change log entry",
      "content_type": 1,
      "codename": "change_logentry"
    }
  },
  {
    "model": "auth.permission",
    "pk": 3,
    "fields": {
      "name": "Can delete log entry",
      "content_type": 1,
      "codename": "delete_logentry"
    }
  },
  {
    "model": "auth.permission",
    "pk": 4,
    "fields": {
      "name": "Can view log entry",
      "content_type": 1,
      "codename": "view_logentry"
    }
  },
  {
    "model": "auth.permission",
    "pk": 5,
    "fields": {
      "name": "Can add permission",
      "content_type": 2,
      "codename": "add_permission"
    }
  },
  {
    "model": "auth.permission",
    "pk": 6,
    "fields": {
      "name": "Can change permission",
      "content_type": 2,
      "codename": "change_permission"
    }
  },
  {
    "model": "auth.permission",
    "pk": 7,
    "fields": {
      "name": "Can delete permission",
      "content_type": 2,
      "codename": "delete_permission"
    }
  },
  {
    "model": "auth.permission",
    "pk": 8,
    "fields": {
      "name": "Can view permission",
      "content_type": 2,
      "codename": "view_permission"
    }
  },
  {
    "model": "auth.permission",
    "pk": 9,
    "fields": {
      "name": "Can add group",
      "content_type": 3,
      "codename": "add_group"
    }
  },
  {
    "model": "auth.permission",
    "pk": 10,
    "fields": {
      "name": "Can change group",
      "content_type": 3,
      "codename": "change_group"
    }
  },
  {
    "model": "auth.permission",
    "pk": 11,
    "fields": {
      "name": "Can delete group",
      "content_type": 3,
      "codename": "delete_group"
    }
  },
  {
    "model": "auth.permission",
    "pk": 12,
    "fields": {
      "name": "Can view group",
      "content_type": 3,
      "codename": "view_group"
    }
  },
  {
    "model": "auth.permission",
    "pk": 13,
    "fields": {
      "name": "Can add content type",
      "content_type": 4,
      "codename": "add_contenttype"
    }
  },
  {
    "model": "auth.permission",
    "pk": 14,
    "fields": {
      "name": "Can change content type",
      "content_type": 4,
      "codename": "change_contenttype"
    }
  },
  {
    "model": "auth.permission",
    "pk": 15,
    "fields": {
      "name": "Can delete content type",
      "content_type": 4,
      "codename": "delete_contenttype"
    }
  },
  {
    "model": "auth.permission",
    "pk": 16,
    "fields": {
      "name": "Can view content type",
      "content_type": 4,
      "codename": "view_contenttype"
    }
  },
  {
    "model": "auth.permission",
    "pk": 17,
    "fields": {
      "name": "Can add session",
      "content_type": 5,
      "codename": "add_session"
    }
  },
  {
    "model": "auth.permission",
    "pk": 18,
    "fields": {
      "name": "Can change session",
      "content_type": 5,
      "codename": "change_session"
    }
  },
  {
    "model": "auth.permission",
    "pk": 19,
    "fields": {
      "name": "Can delete session",
      "content_type": 5,
      "codename": "delete_session"
    }
  },
  {
    "model": "auth.permission",
    "pk": 20,
    "fields": {
      "name": "Can view session",
      "content_type": 5,
      "codename": "view_session"
    }
  },
  {
    "model": "auth.permission",
    "pk": 21,
    "fields": {
      "name": "Can add Публикация",
      "content_type": 6,
      "codename": "add_publication"
    }
  },
  {
    "model": "auth.permission",
    "pk": 22,
    "fields": {
      "name": "Can change Публикация",
      "content_type": 6,
      "codename": "change_publication"
    }
  },
  {
    "model": "auth.permission",
    "pk": 23,
    "fields": {
      "name": "Can delete Публикация",
      "content_type": 6,
      "codename": "delete_publication"
    }
  },
  {
    "model": "auth.permission",
    "pk": 24,
    "fields": {
      "name": "Can view Публикация",
      "content_type": 6,
      "codename": "view_publication"
    }
  },
  {
    "model": "auth.permission",
    "pk": 25,
    "fields": {
      "name": "Can add user",
      "content_type": 7,
      "codename": "add_user"
    }
  },
  {
    "model": "auth.permission",
    "pk": 26,
    "fields": {
      "name": "Can change user",
      "content_type": 7,
      "codename": "change_user"
    }
  },
  {
    "model": "auth.permission",
    "pk": 27,
    "fields": {
      "name": "Can delete user",
      "content_type": 7,
      "codename": "delete_user"
    }
  },
  {
    "model": "auth.permission",
    "pk": 28,
    "fields": {
      "name": "Can view user",
      "content_type": 7,
      "codename": "view_user"
    }
  },
  {
    "model": "auth.permission",
    "pk": 29,
    "fields": {
      "name": "Can add контакт",
      "content_type": 8,
      "codename": "add_contact"
    }
  },
  {
    "model": "auth.permission",
    "pk": 30,
    "fields": {
      "name": "Can change контакт",
      "content_type": 8,
      "codename": "change_contact"
    }
  },
  {
    "model": "auth.permission",
    "pk": 31,
    "fields": {
      "name": "Can delete контакт",
      "content_type": 8,
      "codename": "delete_contact"
    }
  },
  {
    "model": "auth.permission",
    "pk": 32,
    "fields": {
      "name": "Can view контакт",
      "content_type": 8,
      "codename": "view_contact"
    }
  },
  {
    "model": "auth.permission",
    "pk": 33,
    "fields": {
      "name": "Can add подписка",
      "content_type": 9,
      "codename": "add_subscription"
    }
  },
  {
    "model": "auth.permission",
    "pk": 34,
    "fields": {
      "name": "Can change подписка",
      "content_type": 9,
      "codename": "change_subscription"
    }
  },
  {
    "model": "auth.permission",
    "pk": 35,
    "fields": {
      "name": "Can delete подписка",
      "content_type": 9,
      "codename": "delete_subscription"
    }
  },
  {
    "model": "auth.permission",
    "pk": 36,
    "fields": {
      "name": "Can view подписка",
      "content_type": 9,
      "codename": "view_subscription"
    }
  },
  {
    "model": "auth.permission",
    "pk": 37,
    "fields": {
      "name": "Can add payments",
      "content_type": 10,
      "codename": "add_payments"
    }
  },
  {
    "model": "auth.permission",
    "pk": 38,
    "fields": {
      "name": "Can change payments",
      "content_type": 10,
      "codename": "change_payments"
    }
  },
  {
    "model": "auth.permission",
    "pk": 39,
    "fields": {
      "name": "Can delete payments",
      "content_type": 10,
      "codename": "delete_payments"
    }
  },
  {
    "model": "auth.permission",
    "pk": 40,
    "fields": {
      "name": "Can view payments",
      "content_type": 10,
      "codename": "view_payments"
    }
  },
  {
    "model": "contenttypes.contenttype",
    "pk": 1,
    "fields": {
      "app_label": "admin",
      "model": "logentry"
    }
  },
  {
    "model": "contenttypes.contenttype",
    "pk": 2,
    "fields": {
      "app_label": "auth",
      "model": "permission"
    }
  },
  {
    "model": "contenttypes.contenttype",
    "pk": 3,
    "fields": {
      "app_label": "auth",
      "model": "group"
    }
  },
  {
    "model": "contenttypes.contenttype",
    "pk": 4,
    "fields": {
      "app_label": "contenttypes",
      "model": "contenttype"
    }
  },
  {
    "model": "contenttypes.contenttype",
    "pk": 5,
    "fields": {
      "app_label": "sessions",
      "model": "session"
    }
  },
  {
    "model": "contenttypes.contenttype",
    "pk": 6,
    "fields": {
      "app_label": "content",
      "model": "publication"
    }
  },
  {
    "model": "contenttypes.contenttype",
    "pk": 7,
    "fields": {
      "app_label": "users",
      "model": "user"
    }
  },
  {
    "model": "contenttypes.contenttype",
    "pk": 8,
    "fields": {
      "app_label": "contacts",
      "model": "contact"
    }
  },
  {
    "model": "contenttypes.contenttype",
    "pk": 9,
    "fields": {
      "app_label": "subscription",
      "model": "subscription"
    }
  },
  {
    "model": "contenttypes.contenttype",
    "pk": 10,
    "fields": {
      "app_label": "payments",
      "model": "payments"
    }
  },
  {
    "model": "sessions.session",
    "pk": "78l2tzbn2kna5vx62j5q8x6s9ot1ytuf",
    "fields": {
      "session_data": ".eJxVjMEOwiAQRP-FsyHCUqAevfsNZBcWqRpISnsy_rtt0oPeJvPezFsEXJcS1s5zmJK4CCVOvx1hfHLdQXpgvTcZW13mieSuyIN2eWuJX9fD_Tso2Mu2dqScSgatBfbEBkgDJr9lhwMxs9KsoodsszGg0FMaRg3m7PIImEl8vvQtOGA:1rHLdr:3Xcuvciv8x-057ACTJrqAztKmb2f4GA_pY9vFh6w31c",
      "expire_date": "2024-01-07T10:23:31.974Z"
    }
  },
  {
    "model": "content.publication",
    "pk": 3,
    "fields": {
      "name": "Что такое нейросеть и как она работает",
      "description": "Простыми словами: что такое нейросеть\r\nПредставьте, что вам нужно написать программу, которая распознаёт котов по фото. Можно написать длинный список правил и алгоритмов по типу «если есть усы и шерсть, то это кот». Но всех условий учесть нельзя — скажем, если хозяйка одела кота в костюм Санта-Клауса или супергероя, алгоритм будет бессилен. В этом случае нам поможет нейронная сеть.\r\n\r\nНейросеть — это программа, которая умеет обучаться на основе данных и примеров. То есть она не работает по готовым правилам и алгоритмам, а пишет их сама во время обучения. Если показать ей миллион фотографий котов, она научится узнавать их в любых условиях, позах и костюмах.\r\n\r\nХитрость нейросети в том, что алгоритмы в ней устроены как нейроны в человеческом мозге — то есть они связаны между собой синапсами и могут передавать друг другу сигналы. Именно от силы этих сигналов и зависит обучение — например, в случае с котами нейросеть сформирует сильные связи между нейронами, распознающими морду и усы.\r\n\r\nА чтобы нейронка ещё быстрее решала задачи, разработчики придумали располагать нейроны на разных слоях. Вот, например, как будут работать слои нейросети, если загрузить в неё, скажем, картинку с котом из Шрека:\r\n\r\nВходной слой — получает данные. Картинка раскладывается на пиксели, каждый из которых поступает на отдельный нейрон.\r\nСкрытые слои — творят магию. Именно в них происходит обработка данных. Нейросеть узнаёт кота, шляпу, траву и другие детали. Условно можно сказать, что чем больше слоёв в нейронке, тем она умнее.\r\nВыходной слой — выдаёт результат. Нейросеть собирает пазл воедино и отвечает: «Это же тот мем, где Кот в сапогах трогательно смотрит в камеру».\r\nУпрощённо всю эту схему можно представить так (конечно, в реальности всё гораздо сложнее):\r\n\r\n\r\nИзображение: Skillbox Media\r\nКак видите, никакого мышления и сознания в нейросети нет — только алгоритмы и формулы. Единственное, что отличает её от других программ, — это способность обучаться и адаптироваться к новым задачам. О том, как это работает, поговорим чуть позже.",
      "image": "content/ns_sQkFlko.jpg",
      "paid": false,
      "price": "0.00",
      "date_creation": "2023-12-23",
      "date_change": "2023-12-24",
      "number_views": 5,
      "is_publication": true,
      "author": 1
    }
  },
  {
    "model": "content.publication",
    "pk": 4,
    "fields": {
      "name": "Как работает нейросеть Midjourney",
      "description": "Попробуем объяснить работу нейросети более подробно на примере Midjourney — популярного генератора картинок по текстовому описанию. Для примера попросим её нарисовать енота, который летает на скейтборде в стиле фильма «Назад в будущее». Почему бы и нет?\r\n\r\nПРИМЕЧАНИЕ\r\n\r\nТут важно уточнить: технически Midjourney — это не одна нейросеть, а две. Первая отвечает за обработку текста, а вторая — за картинки. То есть мы сможем посмотреть, как нейронки работают с разными видами контента.\r\n\r\nВот как Midjourney будет решать эту задачу:\r\n\r\nШаг 1. Первая нейросеть получает запрос и разбивает его на ключевые слова: «енот», «летает», «скейтборд», «стилистика фильма „Назад в будущее“».\r\n\r\nШаг 2. Затем она превращает слова в наборы цифр, которые называют векторами — так нейросеть сможет определить их смысл.\r\n\r\nШаг 3. Слова в виде векторов передаются на следующий слой нейросети, которая создаёт на их основе набросок будущей картинки. Например, для набора чисел «енот» нейронка создаст пиксельный овал с чёрными полосами.\r\n\r\nШаг 4. Набросок картинки поступает во вторую нейросеть, которая добавляет объектам более сложные детали — цвета, текстуру и освещение. Скажем, для фразы «стилистика фильма „Назад в будущее“» она может добавить доске неоновую подсветку в стиле ретрофутуризма.\r\n\r\nЗа более сложную детализацию отвечает метод стабильной диффузии. Это когда картинка сначала превращается в пиксельный шум, а потом воскресает из него с новыми деталями. Чтобы нейронка могла творить такое колдовство, её научили предсказывать, какие пиксели должны быть на месте размытых.\r\n\r\nШаг 5. Выходной слой улучшает качество изображения и выдаёт готовую картинку.\r\n\r\nНапример, по нашему запросу Midjourney нарисовала два вот таких очаровательных арта. Какой вам больше нравится?\r\n\r\n\r\nИзображение: Midjourney\r\nВы наверняка спросите: а откуда вообще нейросеть знает, что такое енот, скейтборд, а тем более фильм «Назад в будущее»? Ответ прост: её этому обучили на большом массиве данных, который называется датасетом. Принцип тот же, что и с детьми в яслях: «Смотри, Ванюша, это яблоко. А это морковь. А это, Ванюша, летающий скейтборд в стиле ретрофутуризма» :)\r\n\r\nПодробнее о том, как устроен этот процесс, узнаем в следующем разделе.",
      "image": "content/ns2_Ea3ZP4Z.jpg",
      "paid": true,
      "price": "1200.00",
      "date_creation": "2023-12-23",
      "date_change": "2023-12-24",
      "number_views": 3,
      "is_publication": true,
      "author": 1
    }
  },
  {
    "model": "content.publication",
    "pk": 5,
    "fields": {
      "name": "Как учатся нейросети",
      "description": "В обычном программировании всё стабильно: мы пишем программе инструкции, а она по ним выдаёт какой-то результат. Например, можно прописать, как считать время поездки в метро, и она будет делать это всегда одинаково — по заранее заданному алгоритму.\r\n\r\nНейросеть работает по-другому: она не программируется в классическом смысле, а обучается. Выглядит это так: мы даём ей задачу на входе, а на выходе — готовое решение. А алгоритмы и инструкции она учится писать сама, постоянно сверяясь с ответом. Идея в том, чтобы дать нейросети достаточное количество попыток, и рано или поздно она выдаст нужный результат.\r\n\r\nНапример, чтобы научить нейронку внутри Midjourney сопоставлять текст с картинками, ей «скормили» огромный массив изображений с подписями. С одного конца нейросеть получала текст, а с другого — картинку. А потом училась определять, что на фото: человек, водолазка или садовый шланг.\r\n\r\nВот как выглядит мини-датасет на примере Ракеты из «Стражей Галактики»:\r\n\r\nТекстовое описание\r\n\r\nЕнот Ракета из фильма «Стражи Галактики»\r\n\r\nКартинка\r\n\r\n\r\nФАЙЛ: rocket.jpg\r\n\r\nЦВЕТ: коричневый\r\n\r\nРАЗРЕШЕНИЕ: 1920 × 1080\r\n\r\nЖИВОТНОЕ: енот\r\n\r\nА вот как нейронка учится в этом случае:\r\n\r\nПолучает пару «текст + картинка» из датасета. К этому шагу нейросеть подходит со случайными весами — то есть незаданными связями между нейронами.\r\nДелает предсказание. Так как веса случайные, сначала оценка будет неточной. Например, она назовёт енота Ракету фарфоровой вазой.\r\nВычисляет ошибку. Смотрит на готовую картинку и подпись, а потом определяет, насколько точно она установила связь.\r\nКорректирует ошибку и обновляет веса. Усиливает связи между теми нейронами, которые помогут ей распознавать енота. За это отвечает метод обратного распространения ошибки.\r\nПовторяет эти шаги до тех пор, пока не научится угадывать правильно. Такие попытки называются эпохами обучения.\r\nВ результате мы получаем идеальный алгоритм, который способен увидеть связь между картинкой и текстом. Если развернуть его в обратную сторону, как раз и получится генератор изображений по запросу.\r\n\r\nА чтобы научить нейросеть думать более гибко, создатели стали давать ей неправильные пары картинок. И со временем она научилась определять силу связи между разными предметами — похожими и не очень. Это позволило нейросети запомнить множество разных способов решения задачи.\r\n\r\nВ этом и есть главная фишка машинного обучения — оно помогает программе думать креативно. Та же самая Midjourney может выдавать вам тысячи разных енотов по одному и тому же запросу. И конечно, такое количество вариантов не под силу написать даже самой большой команде разработчиков.",
      "image": "content/stat2_cs1iebX_95QWp2K.webp",
      "paid": false,
      "price": "0.00",
      "date_creation": "2023-12-23",
      "date_change": "2023-12-24",
      "number_views": 5,
      "is_publication": true,
      "author": 1
    }
  },
  {
    "model": "content.publication",
    "pk": 6,
    "fields": {
      "name": "Виды нейронных сетей",
      "description": "Сразу оговоримся: существует несколько десятков архитектур нейросетей — но в этом разделе мы обсудим только те, что обрели особую популярность и как-то повлияли на культуру. Если вам нужен полный список, можете заглянуть в нейросетевой зоопарк Института Азимова.\r\n\r\nПерцептроны. Первая модель, которую удалось запустить на вычислительной машине — нейрокомпьютере «Марк I». Её разработал ещё в 1958 году учёный Фрэнк Розенблатт — он заложил некоторые принципы, которые потом переняли более сложные модели. Так, несмотря на однослойную структуру, перцептрон уже умел настраивать веса и примитивно корректировать ошибку.\r\n\r\nБлагодаря нейронке «Марк I» мог даже узнавать отдельные буквы алфавита. С помощью специальной камеры машина сканировала картинки, превращала их в сигналы, которые потом суммировала и выдавала результат: 1 или 0.\r\n\r\n\r\nФрэнк Розенблатт работает с ЭВМ Mark I Perceptron\r\nФото: Cornell University\r\nМногослойные. Сразу после выхода у перцептрона обнаружилась проблема — ему было сложно распознавать объекты в нестандартных условиях. Чтобы это обойти, придумали многослойную модель — она умеет выделять абстрактные сложные признаки из объектов и решать задачи более гибко. Например, она может распознать объект вне зависимости от освещения и угла наклона.\r\n\r\nРекуррентные. Нейросети, заточенные на работу с последовательностями — текстом, речью, аудио или видео. Идея в том, что они помнят всю цепочку данных, могут понимать её смысл и предсказывать, что будет дальше. Например, эту модель используют Google Translate и «Алиса», чтобы генерировать связный текст.\r\n\r\nСвёрточные. Берут на себя всю работу с картинками: распознавание, генерацию, обработку, удаление фона — всё что угодно. За это в них отвечают два алгоритма: свёртка и пулинг. Первый делает послойную нарезку картинки, а второй — находит и кодирует на этих слоях самые важные признаки.\r\n\r\nГенеративные. Любые нейросети, которые что-то создают. Когда получается хорошо, люди их боятся, когда плохо — чувствуют своё превосходство. Из актуальных примеров: генераторы картинок Midjourney и DALL-E, автор похожих на написанные человеком текстов ChatGPT и обработчик селфи Lensa.",
      "image": "content/ns3_GSAqJWm.jpg",
      "paid": false,
      "price": "0.00",
      "date_creation": "2023-12-23",
      "date_change": "2023-12-24",
      "number_views": 6,
      "is_publication": true,
      "author": 3
    }
  },
  {
    "model": "content.publication",
    "pk": 7,
    "fields": {
      "name": "Второй разум: как развивается искусственный интеллект и что его ждёт в будущем",
      "description": "Что представляет собой искусственный интеллект\r\nИскусственный интеллект (ИИ) — это не инструмент или программа, а отдельное направление компьютерных наук. Специалисты по ИИ разрабатывают системы, которые анализируют информацию и решают задачи аналогично тому, как это делает человек.\r\nИИ использует алгоритмы, которые позволяют компьютеру обрабатывать большие объёмы данных и находить в них закономерности. На основе этих закономерностей он может делать выводы, предсказывать события или принимать решения.\r\n\r\nПредставим, что наш мозг — это огромная команда сотрудников, которые вместе работают над разными проектами. Искусственный интеллект — это попытка создать такую же команду с помощью компьютеров и программ. Простой пример ИИ — это шахматный компьютер, который может анализировать ситуацию на доске и делать ходы, основанные на определённых правилах и тактиках. Он имитирует процесс мышления человека при игре в шахматы, но делает это с помощью алгоритмов и вычислений.\r\nИногда ИИ путают с нейросетью, но это справедливо только отчасти. Нейросети — это один из подходов к созданию ИИ, который вдохновлён системой нейронов в мозге. Вместо того чтобы писать сложные алгоритмы для решения задач, нейросети обучаются на основе большого количества данных и находят в них закономерности.\r\nЧтобы работать с нейросетями, не нужно быть учёным. Например, можно заняться Data Science — это междисциплинарная область, которая объединяет знания из статистики, машинного обучения, анализа данных и программирования. Специалисты по Data Science анализируют большие и сложные наборы данных, а нейросети особенно полезны для таких задач.",
      "image": "content/ii2_7J0e18G.webp",
      "paid": true,
      "price": "2000.00",
      "date_creation": "2023-12-23",
      "date_change": "2023-12-24",
      "number_views": 4,
      "is_publication": true,
      "author": 3
    }
  },
  {
    "model": "content.publication",
    "pk": 8,
    "fields": {
      "name": "История возникновения ИИ",
      "description": "Несмотря на медиашум вокруг Chat GPT и генеративных нейросетей, искусственный интеллект — не новая область исследований.\r\n \r\n1950-е: тест Тьюринга и конференция в Дартмуте\r\n\r\nМатематик Алан Тьюринг предложил идею мыслящей машины. Он считал, что машины, как и люди, могут использовать доступную информацию для принятия решений. Чтобы это проверить, он разработал тест. Человек с помощью текстового интерфейса задавал вопросы одновременно другому человеку и машине. Если отличить их ответы не получалось, считалось, что машина прошла тест и обладает искусственным интеллектом.\r\n\r\nПроверить концепцию Тьюринга оказалось сложно из-за ограниченной функциональности компьютеров и дорогой техники. Такие исследования были доступны только крупным технологическим компаниям и престижным университетам. \r\n\r\nВ 1956 году в Дартмутском колледже прошла конференция о «механизации интеллекта», на которой Джон Маккарти, когнитивист и специалист по информатике, предложил термин «искусственный интеллект». Этот момент можно считать началом истории ИИ.\r\n\r\n1960-е: Золотые годы искусственного интеллекта\r\n\r\nКомпьютеры становились доступнее, дешевле, быстрее и могли хранить больше информации. Алгоритмы машинного обучения также совершенствовались:\r\n\r\n●\tНачали разрабатывать первые экспертные системы — компьютерные программы, которые моделируют знания человека в определенной области. Например, в химии или физике. Эти системы обычно состояли из двух компонентов: базы знаний и механизма вывода. База знаний содержала информацию о предметной области, а механизм вывода работал как диалоговое окно. Например система DENDRAL помогала определять структуру молекул неизвестных органических соединений. \r\n●\tПоявились персептроны — первые нейронные сети, которые смогли обучаться на данных и решать простые задачи классификации. Например, распознавать рукописные цифры. \r\n●\tРазработан язык программирования LISP, который стал основным языком для исследований в области ИИ.\r\n●\tВ середине 1960-х Джозеф Вайценбаум создал ELIZA — первого чат-бота, который имитировал работу психотерапевта и мог общаться с человеком на естественном языке. \r\n\r\n\r\nРолевая модель психолога в ChatGPT, которую многие используют в 2023 году, появилась ещё в прошлом веке. \r\nИсточник: scaruffi\r\n\r\n1970–80-е: Спад и возрождение ИИ\r\n\r\nУ государства были завышенные ожидания от учёных в вопросах развития искусственного интеллекта. Когда они не оправдались, финансирование исследований в области ИИ сократилось. Возобновить разработки помогла конкуренция США и Великобритании с Японией. К тому времени там уже построили WABOT-1 — интеллектуального человекоподобного робота.\r\n\r\nВот некоторые разработки западных учёных того времени:\r\n\r\n●\tБолее продвинутые экспертные системы. Например, MYCIN могла диагностировать менингит и рассчитывать дозировку антибиотика для его лечения. \r\n●\tАлгоритмы обратного распространения ошибки, которые позволили обучать нейронные сети гораздо эффективнее.\r\n\r\n1990–2000-е: машины стали обыгрывать людей\r\n\r\nБлагодаря увеличению вычислительной мощности стали возможными более сложные и мощные алгоритмы машинного обучения:\r\n\r\n●\tВ 1997 году Deep Blue от IBM (компьютерная система для игры в шахматы) победила гроссмейстера Гарри Каспарова ― действующего чемпиона мира по шахматам. \r\n●\tВнедрено программное обеспечение для распознавания речи Dragon Systems в Windows. \r\n●\tВ конце 1990-х годов разработали Kismet — искусственного гуманоида, который мог распознавать и демонстрировать эмоции.\r\n●\tВ 2002 году искусственный интеллект появился в домах в виде Roomba — первого робота-пылесоса.\r\n●\tВ 2004 году два робота-геолога NASA — Opportunity и Spirit — исследовали поверхность Марса без помощи человека. \r\n●\tВ 2009 году Google начала разрабатывать технологию самоуправляемых автомобилей. Позже они прошли тест на самостоятельное вождение.",
      "image": "content/ii4_k1stodD.webp",
      "paid": true,
      "price": "500.00",
      "date_creation": "2023-12-23",
      "date_change": "2023-12-24",
      "number_views": 3,
      "is_publication": true,
      "author": 1
    }
  },
  {
    "model": "users.user",
    "pk": 1,
    "fields": {
      "last_login": "2023-12-24T10:23:31.973Z",
      "is_superuser": true,
      "is_staff": true,
      "is_active": true,
      "date_joined": "2023-12-21T13:27:13.585Z",
      "phone": "+79205862225",
      "email": "zhuravsckajam@yandex.ru",
      "password": "pbkdf2_sha256$600000$D6SOoXiPpXk6eVofbn8z37$jmq9mGuM0nRPCAKUWboD3SWlP0yp8HZdg3lanny6DEI=",
      "avatar": "",
      "first_name": "admin",
      "last_name": "admin",
      "city": null,
      "groups": [],
      "user_permissions": []
    }
  },
  {
    "model": "users.user",
    "pk": 3,
    "fields": {
      "last_login": "2023-12-24T08:27:08.231Z",
      "is_superuser": false,
      "is_staff": false,
      "is_active": true,
      "date_joined": "2023-12-22T22:24:24.906Z",
      "phone": "+79205862227",
      "email": "vit@vit.com",
      "password": "pbkdf2_sha256$600000$V4LBqHTQljeeiTsdYxddxe$pEIgKxEDxC7w/nMNcA2+rKv6uln0O+I2qbPwPqMqLwg=",
      "avatar": "",
      "first_name": "Vitalii",
      "last_name": "Журавский",
      "city": null,
      "groups": [],
      "user_permissions": []
    }
  },
  {
    "model": "users.user",
    "pk": 9,
    "fields": {
      "last_login": "2023-12-24T08:23:55.213Z",
      "is_superuser": false,
      "is_staff": false,
      "is_active": true,
      "date_joined": "2023-12-23T10:48:49.382Z",
      "phone": "+79205862228",
      "email": "Vlad@vlad.com",
      "password": "pbkdf2_sha256$600000$SozXURBejuxXaglAK5bfyX$xSY2vwvICo+OwIBHdzvEz+aOUaoBitnMT1Xe02L1q6s=",
      "avatar": "",
      "first_name": "Vlad",
      "last_name": "VladV",
      "city": null,
      "groups": [],
      "user_permissions": []
    }
  },
  {
    "model": "subscription.subscription",
    "pk": 22,
    "fields": {
      "publication": 4,
      "user": 3,
      "is_active": true,
      "payments": 7
    }
  },
  {
    "model": "payments.payments",
    "pk": 7,
    "fields": {
      "user": 3,
      "date": "2023-12-23",
      "publication": 4
    }
  }
]